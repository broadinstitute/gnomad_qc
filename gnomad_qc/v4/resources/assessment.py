"""Script containing assessment related resources."""
from gnomad.resources.resource_utils import TableResource, VersionedTableResource

from gnomad_qc.v4.resources.constants import CURRENT_RELEASE, RELEASES


def _assessment_root(
    version: str = CURRENT_RELEASE,
    test: bool = False,
    data_type: str = "exomes",
) -> str:
    """
    Get root path to the callset assessment resources.

    :param version: Version of assessment path to return.
    :param test: Whether to use a tmp path for analysis of the test VDS instead of the
        full v4 VDS.
    :param data_type: Data type of annotation resource. e.g. "exomes" or "genomes".
        Default is "exomes".
    :return: Root path of assessment resources.
    """
    return (
        f"gs://gnomad-tmp/gnomad_v{version}_testing/assessment/{data_type}"
        if test
        else f"gs://gnomad/v{version}/assessment/{data_type}"
    )


def get_per_sample_counts(
    test: bool = False,
    data_type: str = "exomes",
    suffix: str = None,
    aggregated: bool = False,
    by_ancestry: bool = False,
    by_subset: bool = False,
) -> VersionedTableResource:
    """
    Get per-sample variant counts and other information as generated by Hail's Sample QC module.

    :param test: Whether to use a tmp path for analysis of the test VDS instead of the
        full v4 VDS.
    :param data_type: Data type used in sample QC, e.g. "exomes" or "genomes".
    :param suffix: Additional name to append, containing some method or filtering
        information.
    :param aggregated: Whether to use the aggregated per-sample counts table. Default
        is False.
    :param by_ancestry: Whether to use the per-sample counts table stratified by
        ancestry. Default is False.
    :param by_subset: Whether to use the per-sample counts table stratified by subset.
        Default is False.
    :return: Per sample variant counts table.
    """
    return VersionedTableResource(
        CURRENT_RELEASE,
        {
            version: TableResource(
                f"{_assessment_root(version=version, test=test, data_type=data_type)}/gnomad.{data_type}.v{version}.{suffix if suffix else ''}per_sample_variant_counts{'_aggregated' if aggregated else ''}{'_by_ancestry' if by_ancestry else ''}{'_by_subset' if by_subset else ''}.ht"
            )
            for version in RELEASES
        },
    )
