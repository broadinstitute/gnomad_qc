"""Script containing sample QC related resources."""

from gnomad.resources.resource_utils import (
    MatrixTableResource,
    TableResource,
    VersionedMatrixTableResource,
    VersionedTableResource,
)

from gnomad_qc.v5.resources.basics import qc_temp_prefix
from gnomad_qc.v5.resources.constants import (
    AOU_VERSIONS,
    CURRENT_AOU_VERSION,
    CURRENT_SAMPLE_QC_VERSION,
    GNOMAD_BUCKET,
    SAMPLE_QC_VERSIONS,
    WORKSPACE_BUCKET,
)


def get_sample_qc_root(
    version: str = CURRENT_SAMPLE_QC_VERSION,
    test: bool = False,
    data_type: str = "genomes",
    data_set: str = "aou",
) -> str:
    """
    Return the root GCS path to sample QC results.

    :param version: Sample QC version (default: CURRENT_SAMPLE_QC_VERSION).
    :param test: If True, return a temporary path (e.g., for testing or development).
    :param data_type: Data type (e.g., "genomes" or "exomes").
    :param data_set: Dataset identifier (e.g., "aou", "hgdp_tgp").
    :return: GCS path to the sample QC directory.
    """
    path_suffix = f"sample_qc/{data_type}/{data_set}"

    if test:
        environment = "rwb" if data_set == "aou" else "dataproc"
        return (
            f"{qc_temp_prefix(version=version, environment=environment)}{path_suffix}"
        )

    base_bucket = WORKSPACE_BUCKET if data_set == "aou" else GNOMAD_BUCKET
    return f"gs://{base_bucket}/v{version}/{path_suffix}"


######################################################################
# Hard-filtering resources
######################################################################


def get_sample_qc(
    strat: str = "all",
    test: bool = False,
) -> VersionedTableResource:
    """
    Get AoU sample QC annotations generated by Hail for the specified stratification.

    Possible values for `strat`:
        - bi_allelic
        - multi_allelic
        - all

    :param strat: Which stratification to return.
    :param test: Whether to use a tmp path for analysis of the test VDS instead of the
        full VDS.
    :return: Sample QC table.
    """
    # NOTE: The sample QC tables currently do not have the `aou` prefix added to sample IDs
    # that collide with gnomAD samples. This renaming step must be applied before merging
    # with the metadata, using the `add_project_prefix_to_sample_collisions` function from
    # `gnomad_qc.v5.resources.basics`.
    return VersionedTableResource(
        CURRENT_AOU_VERSION,
        {
            version: TableResource(
                f"{get_sample_qc_root(version, test, data_set='aou')}/hard_filtering/aou.v{version}.sample_qc_all{'' if strat == 'all' else f'_{strat}'}.ht"
            )
            for version in AOU_VERSIONS
        },
    )


hard_filtered_samples = VersionedTableResource(
    CURRENT_SAMPLE_QC_VERSION,
    {
        version: TableResource(
            f"{get_sample_qc_root(version)}/hard_filtering/gnomad.exomes.v{version}.hard_filtered_samples.ht"
        )
        for version in SAMPLE_QC_VERSIONS
    },
)


######################################################################
# QC MT resources
######################################################################


def get_aou_mt_union(test: bool = True) -> MatrixTableResource:
    """
    Get the union of AoU ACAF and exome MatrixTables.

    :param test: Whether to use a tmp path for a test resource.
        Default is True.
    :return: MatrixTableResource containing the union of AoU ACAF and exome MTs.
    """
    return MatrixTableResource(
        path=f"{get_sample_qc_root(CURRENT_SAMPLE_QC_VERSION, test=test, data_type='genomes', data_set='aou')}/union_aou/aou.acaf.exomes.union.mt"
    )


def get_joint_qc(test: bool = False) -> VersionedMatrixTableResource:
    """
    Get joint (exomes + genomes) gnomAD v4 + AoU dense MatrixTableResource.

    :param test: Whether to use a tmp path for a test resource.
    :return: VersionedMatrixTableResource of QC sites.
    """
    return VersionedMatrixTableResource(
        CURRENT_SAMPLE_QC_VERSION,
        {
            version: MatrixTableResource(
                f"{get_sample_qc_root(version, test, data_type='joint', data_set='aou')}/qc_mt/gnomad.joint.v{version}.qc.mt"
            )
            for version in SAMPLE_QC_VERSIONS
        },
    )


######################################################################
# Relatedness resources
######################################################################


def get_cuking_input_path(
    version: str = CURRENT_SAMPLE_QC_VERSION,
    test: bool = False,
    environment: str = "rwb",
) -> str:
    """
    Return the path containing the input files read by cuKING.

    Those files correspond to Parquet tables derived from the dense QC matrix.

    :param version: Sample QC version (default: `CURRENT_SAMPLE_QC_VERSION`).
    :param test: Whether to return a path corresponding to a test subset.
    :param environment: Compute environment, either 'dataproc' or 'rwb'. Defaults to 'rwb'.
    :return: Temporary path to hold Parquet input tables for running cuKING.
    """
    # cuKING inputs can be easily regenerated, so use a temp location.
    return f"{qc_temp_prefix(version=version, environment=environment)}cuking_input{'_test' if test else ''}.parquet"
