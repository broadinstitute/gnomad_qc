"""Script containing sample QC related resources."""

from gnomad.resources.resource_utils import (
    MatrixTableResource,
    TableResource,
    VersionedMatrixTableResource,
    VersionedTableResource,
)

from gnomad_qc.v5.resources.basics import qc_temp_prefix
from gnomad_qc.v5.resources.constants import (
    AOU_VERSIONS,
    CURRENT_AOU_VERSION,
    CURRENT_SAMPLE_QC_VERSION,
    GNOMAD_BUCKET,
    SAMPLE_QC_VERSIONS,
    WORKSPACE_BUCKET,
)


def get_sample_qc_root(
    version: str = CURRENT_SAMPLE_QC_VERSION,
    test: bool = False,
    data_type: str = "genomes",
    data_set: str = "aou",
) -> str:
    """
    Return the root GCS path to sample QC results.

    :param version: Sample QC version (default: CURRENT_SAMPLE_QC_VERSION).
    :param test: If True, return a temporary path (e.g., for testing or development).
    :param data_type: Data type (e.g., "genomes" or "exomes").
    :param data_set: Dataset identifier (e.g., "aou", "hgdp_tgp").
    :return: GCS path to the sample QC directory.
    """
    path_suffix = f"sample_qc/{data_type}/{data_set}"

    if test:
        environment = "rwb" if data_set == "aou" else "dataproc"
        return (
            f"{qc_temp_prefix(version=version, environment=environment)}{path_suffix}"
        )

    base_bucket = WORKSPACE_BUCKET if data_set == "aou" else GNOMAD_BUCKET
    return f"gs://{base_bucket}/v{version}/{path_suffix}"


######################################################################
# Hard-filtering resources
######################################################################


def get_sample_qc(
    strat: str = "all",
    test: bool = False,
) -> VersionedTableResource:
    """
    Get AoU sample QC annotations generated by Hail for the specified stratification.

    Possible values for `strat`:
        - bi_allelic
        - multi_allelic
        - all

    :param strat: Which stratification to return.
    :param test: Whether to use a tmp path for analysis of the test VDS instead of the
        full VDS.
    :return: Sample QC table.
    """
    # NOTE: The sample QC tables currently do not have the `aou` prefix added to sample IDs
    # that collide with gnomAD samples. This renaming step must be applied before merging
    # with the metadata, using the `add_project_prefix_to_sample_collisions` function from
    # `gnomad_qc.v5.resources.basics`.
    return VersionedTableResource(
        CURRENT_AOU_VERSION,
        {
            version: TableResource(
                f"{get_sample_qc_root(version, test, data_set='aou')}/hard_filtering/aou.v{version}.sample_qc_all{'' if strat == 'all' else f'_{strat}'}.ht"
            )
            for version in AOU_VERSIONS
        },
    )


hard_filtered_samples = VersionedTableResource(
    CURRENT_SAMPLE_QC_VERSION,
    {
        version: TableResource(
            f"{get_sample_qc_root(version)}/hard_filtering/aou.genomes.v{version}.hard_filtered_samples.ht"
        )
        for version in SAMPLE_QC_VERSIONS
    },
)


######################################################################
# QC MT resources
######################################################################


def get_aou_mt_union(test: bool = True) -> MatrixTableResource:
    """
    Get the union of AoU ACAF and exome MatrixTables.

    :param test: Whether to use a tmp path for a test resource.
        Default is True.
    :return: MatrixTableResource containing the union of AoU ACAF and exome MTs.
    """
    return MatrixTableResource(
        path=f"{get_sample_qc_root(CURRENT_SAMPLE_QC_VERSION, test=test, data_type='genomes', data_set='aou')}/union_aou/aou.acaf.exomes.union.mt"
    )


def get_joint_qc(test: bool = False) -> VersionedMatrixTableResource:
    """
    Get joint (exomes + genomes) gnomAD v4 + AoU dense MatrixTableResource.

    :param test: Whether to use a tmp path for a test resource.
    :return: VersionedMatrixTableResource of QC sites.
    """
    return VersionedMatrixTableResource(
        CURRENT_SAMPLE_QC_VERSION,
        {
            version: MatrixTableResource(
                f"{get_sample_qc_root(version, test, data_type='joint', data_set='aou')}/qc_mt/gnomad.joint.v{version}.qc.mt"
            )
            for version in SAMPLE_QC_VERSIONS
        },
    )


######################################################################
# Relatedness resources
######################################################################


def get_cuking_input_path(
    version: str = CURRENT_SAMPLE_QC_VERSION,
    test: bool = False,
    environment: str = "rwb",
) -> str:
    """
    Return the path containing the input files read by cuKING.

    Those files correspond to Parquet tables derived from the dense QC matrix.

    :param version: Sample QC version (default: `CURRENT_SAMPLE_QC_VERSION`).
    :param test: Whether to return a path corresponding to a test subset. Default is False.
    :param environment: Compute environment, either 'dataproc' or 'rwb'. Default is 'rwb'.
    :return: Temporary path to hold Parquet input tables for running cuKING.
    """
    # cuKING inputs can be easily regenerated, so use a temp location.
    return f"{qc_temp_prefix(version=version, environment=environment)}cuking_input{'_test' if test else ''}.parquet"


def get_cuking_output_path(
    version: str = CURRENT_SAMPLE_QC_VERSION,
    test: bool = False,
    environment: str = "rwb",
) -> str:
    """
    Return the path containing the output files written by cuKING.

    Those files correspond to Parquet tables containing relatedness results.

    :param version: Sample QC version (default: `CURRENT_SAMPLE_QC_VERSION`).
    :param test: Whether to return a path corresponding to a test subset. Default is False.
    :param environment: Compute environment, either 'dataproc' or 'rwb'. Default is 'rwb'.
    :return: Temporary path to hold Parquet output tables for running cuKING.
    """
    # cuKING outputs can be easily regenerated, so use a temp location.
    return f"{qc_temp_prefix(version=version, environment=environment)}cuking_output{'_test' if test else ''}.parquet"


def relatedness(test: bool = False, raw: bool = False) -> VersionedTableResource:
    """
    Get the VersionedTableResource for relatedness results.

    :param test: Whether to use a tmp path for a test resource.
    :param raw: Whether to return the raw cuKING output in Hail Table format. If False,
        returns the processed relatedness table. Default is False.
    :return: VersionedTableResource.
    """
    suffix = ".raw" if raw else ""
    return VersionedTableResource(
        CURRENT_SAMPLE_QC_VERSION,
        {
            version: TableResource(
                f"{get_sample_qc_root(version, test, data_type='joint')}/relatedness/gnomad.joint.v{version}.relatedness{suffix}.ht"
            )
            for version in SAMPLE_QC_VERSIONS
        },
    )


def related_samples_to_drop(test: bool = False) -> VersionedTableResource:
    """
    Get the VersionedTableResource for samples to drop for genetic ancestry PCA.

    :param test: Whether to use a tmp path for a test resource.
    :return: VersionedTableResource.
    """
    return VersionedTableResource(
        CURRENT_SAMPLE_QC_VERSION,
        {
            version: TableResource(
                f"{get_sample_qc_root(version, test, data_type='joint')}/relatedness/gnomad.joint.v{version}.related_samples_to_drop.pca.ht"
            )
            for version in SAMPLE_QC_VERSIONS
        },
    )


def sample_rankings(test: bool = False) -> VersionedTableResource:
    """
    Get the VersionedTableResource for sample rankings for genetic ancestry PCA.

    :param test: Whether to use a tmp path for a test resource.
    :return: VersionedTableResource.
    """
    return VersionedTableResource(
        CURRENT_SAMPLE_QC_VERSION,
        {
            version: TableResource(
                f"{get_sample_qc_root(version, test, data_type='joint')}/relatedness/gnomad.joint.v{version}.samples_ranking.pca.ht"
            )
            for version in SAMPLE_QC_VERSIONS
        },
    )


######################################################################
# Genetic ancestry inference resources
######################################################################


def _get_genetic_ancestry_pca_ht_path(
    part: str,
    version: str = CURRENT_SAMPLE_QC_VERSION,
    include_unreleasable_samples: bool = False,
    test: bool = False,
    data_type: str = "joint",
) -> str:
    """
    Get path to files related to genetic ancestry PCA.

    :param part: String indicating the type of PCA file to return (loadings,
        eigenvalues, or scores).
    :param version: Version of sample QC path to return.
    :param include_unreleasable_samples: Whether the PCA included unreleasable samples.
    :param data_type: Data type used in sample QC, e.g. "exomes" or "joint".
    :return: Path to requested genetic ancestry PCA file.
    """
    return f"{get_sample_qc_root(version, test, data_type)}/genetic_ancestry_inference/gnomad.{data_type}.v{version}.pca_{part}{'_with_unreleasable_samples' if include_unreleasable_samples else ''}.ht"


def genetic_ancestry_pca_loadings(
    include_unreleasable_samples: bool = False,
    test: bool = False,
    data_type: str = "joint",
) -> VersionedTableResource:
    """
    Get the genetic ancestry PCA loadings VersionedTableResource.

    :param include_unreleasable_samples: Whether to get the PCA loadings from the PCA
        that used unreleasable samples.
    :param test: Whether to use a temp path.
    :param data_type: Data type used in sample QC, e.g. "exomes" or "joint".
    :return: Genetic ancestry PCA loadings.
    """
    return VersionedTableResource(
        CURRENT_SAMPLE_QC_VERSION,
        {
            version: TableResource(
                _get_genetic_ancestry_pca_ht_path(
                    "loadings", version, include_unreleasable_samples, test, data_type
                )
            )
            for version in SAMPLE_QC_VERSIONS
        },
    )


def genetic_ancestry_pca_scores(
    include_unreleasable_samples: bool = False,
    test: bool = False,
    data_type: str = "joint",
    projection: bool = False,
) -> VersionedTableResource:
    """
    Get the genetic ancestry PCA scores VersionedTableResource.

    :param include_unreleasable_samples: Whether to get the PCA scores from the PCA
        that used unreleasable samples.
    :param test: Whether to use a temp path.
    :param data_type: Data type used in sample QC, e.g. "exomes" or "joint".
    :param projection: Whether the scores ht includes projection scores instead of just original scores.
    :return: Genetic ancestry PCA scores.
    """
    return VersionedTableResource(
        CURRENT_SAMPLE_QC_VERSION,
        {
            version: TableResource(
                _get_genetic_ancestry_pca_ht_path(
                    "scores", version, include_unreleasable_samples, test, data_type
                ).replace(".ht", ".projection.ht" if projection else ".ht")
            )
            for version in SAMPLE_QC_VERSIONS
        },
    )


def genetic_ancestry_pca_eigenvalues(
    include_unreleasable_samples: bool = False,
    test: bool = False,
    data_type: str = "joint",
) -> VersionedTableResource:
    """
    Get the genetic ancestry PCA eigenvalues VersionedTableResource.

    :param include_unreleasable_samples: Whether to get the PCA eigenvalues from the
        PCA that used unreleasable samples.
    :param test: Whether to use a temp path.
    :param data_type: Data type used in sample QC, e.g. "exomes" or "joint".
    :return: Genetic ancestry PCA eigenvalues.
    """
    return VersionedTableResource(
        CURRENT_SAMPLE_QC_VERSION,
        {
            version: TableResource(
                _get_genetic_ancestry_pca_ht_path(
                    "eigenvalues",
                    version,
                    include_unreleasable_samples,
                    test,
                    data_type,
                )
            )
            for version in SAMPLE_QC_VERSIONS
        },
    )


def gen_anc_rf_path(
    version: str = CURRENT_SAMPLE_QC_VERSION,
    test: bool = False,
    data_type: str = "joint",
) -> str:
    """
    Path to RF model used for inferring genetic ancestry groups.

    :param version: gnomAD Version.
    :param test: Whether the RF assignment was from a test dataset.
    :param data_type: Data type used in sample QC, e.g. "exomes" or "joint".
    :return: String path to sample genetic ancestry group RF model.
    """
    return f"{get_sample_qc_root(version, test, data_type)}/genetic_ancestry_inference/gnomad.{data_type}.v{version}.gen_anc.RF_fit.pickle"


def get_gen_anc_ht(
    version: str = CURRENT_SAMPLE_QC_VERSION,
    test: bool = False,
    data_type: str = "joint",
):
    """
    Get the TableResource of samples' inferred genetic ancestry group for the indicated gnomAD version.

    :param version: Version of gen anc group TableResource to return.
    :param test: Whether to use the test version of the genetic ancestry TableResource.
    :param data_type: Data type used in sample QC, e.g. "exomes" or "joint".
    :return: TableResource of sample gen anc groups.
    """
    return TableResource(
        f"{get_sample_qc_root(version, test, data_type)}/genetic_ancestry_inference/gnomad.{data_type}.v{version}.gen_anc.ht"
    )


def get_gen_anc_pr_ht(
    version: str = CURRENT_SAMPLE_QC_VERSION,
    test: bool = False,
    data_type: str = "joint",
):
    """
    Get the TableResource of genetic ancestry inference precision and recall values.

    :param version: Version of gen anc group PR TableResource to return.
    :param test: Whether to use the test version of the gen anc group PR TableResource.
    :param data_type: Data type used in sample QC, e.g. "exomes" or "joint".
    :return: TableResource of genetic ancestry inference PR values.
    """
    return TableResource(
        f"{get_sample_qc_root(version, test, data_type)}/genetic_ancestry_inference/gnomad.{data_type}.v{version}.gen_anc_pr.ht"
    )


def per_grp_min_rf_probs_json_path(version: str = CURRENT_SAMPLE_QC_VERSION):
    """
    Get path to JSON file containing per genetic ancestry group minimum RF probabilities.

    :param version: Version of the JSON to return.
    :return: Path to per genetic ancestry group minimum RF probabilities JSON.
    """
    return f"{get_sample_qc_root(version, data_type='joint')}/genetic_ancestry_inference/gnomad.joint.v{version}.gen_anc_min_probs.json"


######################################################################
# Outlier detection resources
######################################################################


def get_outlier_detection_sample_qc(
    test: bool = False,
) -> VersionedTableResource:
    """
    Get modified sample QC Table for sample outlier detection.

    This table has the following modifications:
        - Remove hard filtered samples
        - Add project prefix to sample collisions
        - Add 'r_snp_indel' metric
        - Sample 1% of the dataset if `test` is True

    :param test: Whether to use the test version of the sample QC TableResource.
    :return: Modified sample QC Table.
    """
    return VersionedTableResource(
        CURRENT_SAMPLE_QC_VERSION,
        {
            version: TableResource(
                f"{get_sample_qc_root(version, test)}/outlier_detection/gnomad.v{version}.outlier_detection_sample_qc.ht"
            )
            for version in SAMPLE_QC_VERSIONS
        },
    )


def stratified_filtering(
    test: bool = False,
) -> VersionedTableResource:
    """
    Get VersionedTableResource for stratified genetic ancestry-based metrics filtering.

    :param test: Whether to use a tmp path for a test resource.
    :return: VersionedTableResource.
    """
    return VersionedTableResource(
        CURRENT_SAMPLE_QC_VERSION,
        {
            version: TableResource(
                f"{get_sample_qc_root(version, test)}/outlier_detection/gnomad.genomes.v{version}.stratified_filtering.gen_anc_stratified.ht"
            )
            for version in SAMPLE_QC_VERSIONS
        },
    )


def regressed_filtering(
    test: bool = False,
    include_unreleasable_samples: bool = False,
) -> VersionedTableResource:
    """
    Get VersionedTableResource for regression genetic ancestry-based metrics filtering.

    :param test: Whether to use a tmp path for a test resource.
    :param include_unreleasable_samples: Whether to get resource that included
        unreleasable samples in regression.
    :return: VersionedTableResource.
    """
    postfix = ".include_unreleasable_samples" if include_unreleasable_samples else ""
    return VersionedTableResource(
        CURRENT_SAMPLE_QC_VERSION,
        {
            version: TableResource(
                f"{get_sample_qc_root(version, test)}/outlier_detection/gnomad.genomes.v{version}.regressed_filtering.gen_anc_pc_regressed{postfix}.ht"
            )
            for version in SAMPLE_QC_VERSIONS
        },
    )


def nearest_neighbors(
    test: bool = False,
    approximation: bool = False,
    include_unreleasable_samples: bool = False,
) -> VersionedTableResource:
    """
    Get VersionedTableResource for genetic ancestry group PCA nearest neighbors.

    :param test: Whether to use a tmp path for a test resource.
    :param approximation: Whether to get resource that is approximate nearest
        neighbors.
    :param include_unreleasable_samples: Whether to get resource that included
        unreleasable samples in nearest neighbors determination.
    :return: VersionedTableResource.
    """
    postfix = ""
    if approximation:
        postfix += ".approximation"
    if include_unreleasable_samples:
        postfix += ".include_unreleasable_samples"
    return VersionedTableResource(
        CURRENT_SAMPLE_QC_VERSION,
        {
            version: TableResource(
                f"{get_sample_qc_root(version, test)}/outlier_detection/gnomad.genomes.v{version}.nearest_neighbors{postfix}.ht"
            )
            for version in SAMPLE_QC_VERSIONS
        },
    )


def nearest_neighbors_filtering(
    test: bool = False,
) -> VersionedTableResource:
    """
    Get VersionedTableResource for nearest neighbors platform/genetic ancestry group-based metrics filtering.

    :param test: Whether to use a tmp path for a test resource.
    :return: VersionedTableResource.
    """
    return VersionedTableResource(
        CURRENT_SAMPLE_QC_VERSION,
        {
            version: TableResource(
                f"{get_sample_qc_root(version, test)}/outlier_detection/gnomad.genomes.v{version}.nearest_neighbors_filtering.ht"
            )
            for version in SAMPLE_QC_VERSIONS
        },
    )


def finalized_outlier_filtering(
    test: bool = False,
) -> VersionedTableResource:
    """
    Get VersionedTableResource for the finalized outlier filtering.

    :param test: Whether to use a tmp path for a test resource.
    :return: VersionedTableResource.
    """
    return VersionedTableResource(
        CURRENT_SAMPLE_QC_VERSION,
        {
            version: TableResource(
                f"{get_sample_qc_root(version, test)}/outlier_detection/gnomad.genomes.v{version}.final_outlier_filtering.ht"
            )
            for version in SAMPLE_QC_VERSIONS
        },
    )
