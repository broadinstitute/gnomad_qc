"""Script containing sample QC related resources."""

from gnomad.resources.resource_utils import TableResource, VersionedTableResource

from gnomad_qc.v5.resources.basics import qc_temp_prefix
from gnomad_qc.v5.resources.constants import (
    AOU_VERSIONS,
    CURRENT_AOU_VERSION,
    CURRENT_SAMPLE_QC_VERSION,
    WORKSPACE_BUCKET,
)


def get_sample_qc_root(
    version: str = CURRENT_SAMPLE_QC_VERSION,
    test: bool = False,
    data_type="genomes",
    data_set="aou",
) -> str:
    """
    Return path to sample QC root folder.

    :param version: Version of sample QC path to return.
    :param test: Whether to use a tmp path for analysis of the test VDS instead of the
        full v4 VDS.
    :param data_type: Data type used in sample QC, e.g. "genomes".
    :param data_set: Data set used in sample QC, e.g. "aou" or "hgdp_tgp".
    :return: Root to sample QC path.
    """
    if data_set == "aou":
        if test:
            return (
                qc_temp_prefix(version=version, environment="rwb")
                + f"sample_qc/{data_set}"
            )
        else:
            return f"gs://{WORKSPACE_BUCKET}/v5.0/sample_qc/{data_set}"
    else:
        if test:
            return (
                qc_temp_prefix(version=version, environment="dataproc")
                + f"sample_qc/{data_type}/{data_set}"
            )
        else:
            return f"gs://gnomad/v{version}/sample_qc/{data_type}/{data_set}"


def get_aou_sample_qc(
    strat: str = "all",
    test: bool = False,
) -> VersionedTableResource:
    """
    Get AoU sample QC annotations generated by Hail for the specified stratification.

    Possible values for `strat`:
        - bi_allelic
        - multi_allelic
        - all

    :param strat: Which stratification to return.
    :param test: Whether to use a tmp path for analysis of the test VDS instead of the
        full v4 VDS.
    :return: Sample QC table.
    """
    return VersionedTableResource(
        CURRENT_AOU_VERSION,
        {
            version: TableResource(
                f"{get_sample_qc_root(version, test, data_set='aou')}/hard_filtering/aou.{version}.sample_qc_all{'' if strat == 'all' else f'_{strat}'}.ht"
            )
            for version in AOU_VERSIONS
        },
    )
